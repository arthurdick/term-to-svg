#!/usr/bin/env php
<?php

declare(strict_types=1);

/**
 * USAGE:
 * 1. Record a session: script --timing=rec.time rec.log
 * 2. Run commands in the new shell, then type `exit`.
 * 3. Convert to SVG: ./term-to-svg -t rec.log -i rec.time -o output.svg
 */

use ArthurDick\TermToSvg\Config;
use ArthurDick\TermToSvg\TerminalToSvgConverter;

// --- Autoloader ---
// A robust way to find the autoloader, whether the script is run from a
// local vendor directory, a global Composer installation, or inside a PHAR.
if (Phar::running()) {
    // When running in a PHAR, the path is predictable.
    require_once __DIR__ . '/../vendor/autoload.php';
} else {
    // For local dev or global install, search for the autoloader.
    $autoloaders = [
        // Project's own vendor directory (local development)
        __DIR__ . '/../vendor/autoload.php',
        // Path for global Composer install
        __DIR__ . '/../../../autoload.php',
    ];

    $autoloader_found = false;
    foreach ($autoloaders as $autoloader) {
        if (file_exists($autoloader)) {
            require_once $autoloader;
            $autoloader_found = true;
            break;
        }
    }

    if (!$autoloader_found) {
        fwrite(STDERR, "Could not find a valid Composer autoloader. Please run 'composer install'.\n");
        exit(1);
    }
}

// --- Check for mbstring extension ---
if (!extension_loaded('mbstring')) {
    fwrite(STDERR, "Error: The 'mbstring' PHP extension is required but not installed.\n");
    exit(1);
}

// --- Main Execution ---

function print_help()
{
    echo "Usage: term-to-svg [options]\n";
    echo "\n";
    echo "Options:\n";
    echo "  -t, --typescript_file <file>  Path to the typescript file (required).\n";
    echo "  -i, --timing_file <file>      Path to the timing file (required).\n";
    echo "  -o, --output_file <file>      Path to the output SVG file (required).\n";
    echo "  --rows <number>           Number of terminal rows.\n";
    echo "  --cols <number>           Number of terminal columns.\n";
    echo "  --font_size <number>      Font size.\n";
    echo "  --line_height_factor <float> Line height factor.\n";
    echo "  --font_width_factor <float> Font width factor.\n";
    echo "  --font_family <string>    Font family.\n";
    echo "  --default_fg <hex>        Default foreground color.\n";
    echo "  --default_bg <hex>        Default background color.\n";
    echo "  --animation_pause_seconds <number> Animation pause in seconds at the end.\n";
    echo "  --poster-at <time|end>    Generate a non-animated SVG of a single frame at a specific time or at the end.\n";
    echo "  --interactive             Enable interactive player controls.\n";
    echo "  -v, --version             Display the version number.\n";
    echo "  -h, --help                Display this help message.\n";
    exit(0);
}

$short_options = "vht:i:o:";
$long_options = [
    "typescript_file:",
    "timing_file:",
    "output_file:",
    "id:",
    "rows:",
    "cols:",
    "font_size:",
    "line_height_factor:",
    "font_width_factor:",
    "font_family:",
    "default_fg:",
    "default_bg:",
    "animation_pause_seconds:",
    "poster_at:",
    "interactive",
    "version",
    "help",
];
$options = getopt($short_options, $long_options);

if (isset($options['h']) || isset($options['help'])) {
    print_help();
}

if (isset($options['v']) || isset($options['version'])) {
    echo 'term-to-svg version ' . TerminalToSvgConverter::VERSION . "\n";
    exit(0);
}

$options['typescript_file'] = $options['t'] ?? $options['typescript_file'] ?? null;
$options['timing_file'] = $options['i'] ?? $options['timing_file'] ?? null;
$options['output_file'] = $options['o'] ?? $options['output_file'] ?? null;

$missing_options = [];
if (empty($options['typescript_file'])) {
    $missing_options[] = '--typescript_file (-t)';
}
if (empty($options['timing_file'])) {
    $missing_options[] = '--timing_file (-i)';
}
if (empty($options['output_file'])) {
    $missing_options[] = '--output_file (-o)';
}

if (!empty($missing_options)) {
    echo "Error: Missing required option(s): " . implode(', ', $missing_options) . "\n";
    echo "Use --help for more information.\n";
    exit(1);
}

// Resolve arguments to absolute paths to ensure they can be found when run from the PHAR
$typescriptFile = realpath($options['typescript_file']);
$timingFile = realpath($options['timing_file']);
// The output file path can be relative, so we don't use realpath on it.
$outputFile = $options['output_file'];


if ($typescriptFile === false || !is_readable($typescriptFile)) {
    echo "Error: Typescript file not found or is not readable: {$options['typescript_file']}\n";
    exit(1);
}

if ($timingFile === false || !is_readable($timingFile)) {
    echo "Error: Timing file not found or is not readable: {$options['timing_file']}\n";
    exit(1);
}

try {
    // Get default config and override with command-line options
    $config = Config::DEFAULTS;
    foreach ($long_options as $long_opt) {
        $isFlag = !str_ends_with($long_opt, ':');
        $opt = rtrim($long_opt, ':');
        if (isset($options[$opt])) {
            if ($isFlag) {
                $config[$opt] = true;
            } else {
                $config[$opt] = $options[$opt];
            }
        }
    }

    // Use the new Config class for default settings
    $converter = new TerminalToSvgConverter($typescriptFile, $timingFile, $config);
    $svgContent = $converter->convert();
    file_put_contents($outputFile, $svgContent);
    if ($config['poster_at'] !== null) {
        echo "✅ Successfully generated SVG poster: {$outputFile}\n";
    } else {
        echo "✅ Successfully generated animated SVG: {$outputFile}\n";
    }
} catch (Exception $e) {
    echo "❌ An error occurred: " . $e->getMessage() . "\n";
    exit(1);
}
